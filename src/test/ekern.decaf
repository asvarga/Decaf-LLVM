/* ekern - Lines.decaf
 *
 * 'TextBuffer' is like a "frame buffer" but for ascii art
 * 'LineDrawer' implements bresenham's algorithm for rasterizing lines
 *  Lines.main() draws some stuff then displays it
 */

class TextBuffer {
	private int width, height;
	private char[][] buffer;

	public TextBuffer(int w, int h){
		width = w; height = h;
		buffer = new char[width][height];
		int x=0;
		while(x<width){
			int y=0;
			while(y<height){
				buffer[x][y] = ' ';
				y=y+1;
				};
			x=x+1;
			}
		}
	
	public void set(int x, int y, char c){
		if(x < 0 || x >= width || y < 0 || y >= width){ return; };
		buffer[x][y] = c;
		}
	
	public void print(){
		int y=height-1;
		while(y>=0){
			int x=0;
			while(x<width){
				IO.putChar(buffer[x][y]);
				//System.out.print(buffer[x][y]);
				x=x+1;
				}
			IO.putChar('\n');
			//System.out.print('\n');
			y=y-1;
			}
		}
	}


class LineDrawer{
	public static void drawLine(TextBuffer tb, int sx, int sy, int ex, int ey){
		
		int dx = ex - sx;
		int dy = ey - sy;
		if(dx < 0){ dx = -dx; };
		if(dy < 0){ dy = -dy; };

		if(dy > dx){
		
			IO.putString("drawLine(), dy>dx:\n");
			IO.putString("sy="); IO.putInt(sy);
			IO.putString(" ey="); IO.putInt(ey);
			IO.putChar('\n');
			if(ey < sy){
				IO.putString("swapping\n");
				int t;
				t=ey; ey=sy; sy=t;
				t=ex; ex=sx; sx=t;
				};
		
			IO.putString("sy="); IO.putInt(sy);
			IO.putString(" ey="); IO.putInt(ey);
			IO.putChar('\n');
			IO.putChar('\n');
			
			int s = 1000000 * (ex-sx) / (ey-sy);
			int a = 0;
			int x = sx;
			int y=sy;
			while(y<=ey){
				a = a+s;
				if(a > 1000000){
					a = a - 1000000;
					x = x + 1;
				}else if(a < -1000000){
					a = a + 1000000;
					x = x - 1;
					}
				tb.set(x,y,'*');
				y=y+1;
				}
			
		}else{
			
			if(ex < sx){
				int t=ey; ey=sy; sy=t;
				t=ex; ex=sx; sx=t;
				};
			
			int s = 1000000 * (ey-sy) / (ex-sx);
			int a = 0;
			int y = sy;
			int x = sx;
			while(x<=ex){
				a = a + s;
				if(a > 1000000){
					a = a - 1000000;
					y = y + 1;
				}else if(a < -1000000){
					a = a + 1000000;
					y = y - 1;
					}
				tb.set(x,y,'*');
				x=x+1;
				}
			
			}
		return;
		
		}
	}

class Lines {
	public static void main(String[] args){
		TextBuffer tb = new TextBuffer(80,23);

		/* border */
		LineDrawer.drawLine(tb,  0,  0, 79,  0);	
		LineDrawer.drawLine(tb, 79,  0, 79, 22);	
		LineDrawer.drawLine(tb, 79, 22,  0, 22);	
		LineDrawer.drawLine(tb,  0, 22,  0,  0);

		/* diagonal lines*/
		LineDrawer.drawLine(tb,  0, 16, 75, 20);
		LineDrawer.drawLine(tb, 52, 16, 75, 20);
		LineDrawer.drawLine(tb, 52,  0, 75, 20);
		/* border around text */
		LineDrawer.drawLine(tb,  0, 16, 52, 16);
		LineDrawer.drawLine(tb, 52, 16, 52,  0);
		/* C */
		LineDrawer.drawLine(tb, 10, 14,  2, 14);	
		LineDrawer.drawLine(tb,  2, 14,  2,  2);	
		LineDrawer.drawLine(tb,  2,  2, 10,  2);	
		/* S */
		LineDrawer.drawLine(tb, 20, 14, 12, 14);	
		LineDrawer.drawLine(tb, 12, 14, 12,  8);	
		LineDrawer.drawLine(tb, 12,  8, 20,  8);	
		LineDrawer.drawLine(tb, 20,  8, 20,  2);	
		LineDrawer.drawLine(tb, 20,  2, 12,  2);	
		/* 1 */
		LineDrawer.drawLine(tb, 26,  2, 26, 14);
		LineDrawer.drawLine(tb, 24, 12, 26, 14);
		LineDrawer.drawLine(tb, 25,  2, 27,  2);
		/* 2 */
		LineDrawer.drawLine(tb, 32, 14, 40, 14);	
		LineDrawer.drawLine(tb, 40, 14, 40,  8);	
		LineDrawer.drawLine(tb, 40,  8, 32,  8);	
		LineDrawer.drawLine(tb, 32,  8, 32,  2);	
		LineDrawer.drawLine(tb, 32,  2, 40,  2);	
		/* 6 */
		LineDrawer.drawLine(tb, 50, 14, 42, 14);	
		LineDrawer.drawLine(tb, 42, 14, 42,  8);	
		LineDrawer.drawLine(tb, 42,  8, 50,  8);	
		LineDrawer.drawLine(tb, 50,  8, 50,  2);	
		LineDrawer.drawLine(tb, 50,  2, 42,  2);	
		LineDrawer.drawLine(tb, 42,  2, 42,  8);	

		tb.print();

		return;	
		}
	}
